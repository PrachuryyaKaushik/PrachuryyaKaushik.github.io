import React, { useState, useEffect } from "react";
import { Button, Input, Select, Card } from "@/components/ui";
import { motion } from "framer-motion";

const NeuralNetworkVisualizer = () => {
  const [numInputs, setNumInputs] = useState(5);
  const [numHidden, setNumHidden] = useState(8);
  const [numOutputs, setNumOutputs] = useState(2);
  const [inputValues, setInputValues] = useState(Array(5).fill(0.5));
  const [outputValues, setOutputValues] = useState(Array(2).fill(0.5));
  const [weights, setWeights] = useState([]);
  const [epoch, setEpoch] = useState(0);
  
  useEffect(() => {
    initializeWeights();
  }, [numInputs, numHidden, numOutputs]);

  const initializeWeights = () => {
    const newWeights = {
      inputToHidden: Array(numInputs)
        .fill(null)
        .map(() => Array(numHidden).fill(0).map(() => Math.random() * 2 - 1)),
      hiddenToOutput: Array(numHidden)
        .fill(null)
        .map(() => Array(numOutputs).fill(0).map(() => Math.random() * 2 - 1)),
    };
    setWeights(newWeights);
  };

  const updateEpoch = () => {
    setEpoch(epoch + 1);
    setWeights((prevWeights) => ({
      inputToHidden: prevWeights.inputToHidden.map((row) =>
        row.map((w) => w + (Math.random() - 0.5) * 0.1)
      ),
      hiddenToOutput: prevWeights.hiddenToOutput.map((row) =>
        row.map((w) => w + (Math.random() - 0.5) * 0.1)
      ),
    }));
  };

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold text-center">Neural Network Visualizer</h1>
      <div className="flex space-x-4">
        <Select value={numInputs} onChange={(e) => setNumInputs(Number(e))}>
          {[...Array(6).keys()].map((i) => (
            <option key={i} value={i + 5}>{i + 5} Inputs</option>
          ))}
        </Select>
        <Select value={numHidden} onChange={(e) => setNumHidden(Number(e))}>
          {[...Array(5).keys()].map((i) => (
            <option key={i} value={i + 8}>{i + 8} Hidden</option>
          ))}
        </Select>
        <Select value={numOutputs} onChange={(e) => setNumOutputs(Number(e))}>
          {[...Array(3).keys()].map((i) => (
            <option key={i} value={i + 2}>{i + 2} Outputs</option>
          ))}
        </Select>
      </div>

      <div className="grid grid-cols-3 gap-8 justify-center items-center">
        <div>
          <h2 className="text-lg font-semibold">Inputs</h2>
          {inputValues.map((val, i) => (
            <Input
              key={i}
              type="number"
              value={val}
              onChange={(e) => {
                const newValues = [...inputValues];
                newValues[i] = parseFloat(e.target.value) || 0;
                setInputValues(newValues);
              }}
              className="my-1"
            />
          ))}
        </div>

        <div className="flex flex-col items-center">
          <h2 className="text-lg font-semibold">Hidden Layer</h2>
          {weights.inputToHidden && (
            <div className="grid gap-3">
              {weights.inputToHidden.map((row, i) => (
                <div key={i} className="flex gap-2">
                  {row.map((w, j) => (
                    <motion.div
                      key={j}
                      className={`p-2 rounded-full text-center text-white ${w > 0 ? "bg-green-500" : "bg-red-500"}`}
                    >
                      {w.toFixed(2)}
                    </motion.div>
                  ))}
                </div>
              ))}
            </div>
          )}
        </div>

        <div>
          <h2 className="text-lg font-semibold">Outputs</h2>
          {outputValues.map((val, i) => (
            <Input
              key={i}
              type="number"
              value={val}
              onChange={(e) => {
                const newValues = [...outputValues];
                newValues[i] = parseFloat(e.target.value) || 0;
                setOutputValues(newValues);
              }}
              className="my-1"
            />
          ))}
        </div>
      </div>

      <div className="flex justify-center space-x-4">
        <Button onClick={updateEpoch}>Next Epoch</Button>
        <span className="text-lg">Epoch: {epoch}</span>
      </div>
    </div>
  );
};

export default NeuralNetworkVisualizer;