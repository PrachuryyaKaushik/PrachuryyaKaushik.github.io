<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Feed-Forward Neural Network Visualization</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; }
        .node { fill: lightgray; stroke: black; stroke-width: 1px; }
        .hidden { fill: lightyellow; }
        .output { fill: lightblue; }
        .link { stroke: gray; stroke-width: 2px; }
        .label { font-size: 14px; font-weight: bold; }
    </style>
</head>
<body>
    <h2>Feed-Forward Neural Network Visualization</h2>
    <svg width="600" height="400"></svg>
    <script>
        const width = 600, height = 400;
        const svg = d3.select("svg");

        const layers = [4, 3, 1];
        let nodes = [], links = [];

        layers.forEach((num, layerIndex) => {
            for (let i = 0; i < num; i++) {
                nodes.push({
                    id: `L${layerIndex}N${i}`,
                    layer: layerIndex,
                    index: i,
                    value: Math.random().toFixed(2)
                });
            }
        });

        nodes.forEach(source => {
            nodes.forEach(target => {
                if (source.layer + 1 === target.layer) {
                    links.push({ source: source.id, target: target.id, weight: Math.random().toFixed(2) });
                }
            });
        });

        const xScale = d3.scaleLinear().domain([0, layers.length - 1]).range([50, width - 50]);
        const yScales = layers.map(num => d3.scaleLinear().domain([0, num - 1]).range([100, height - 100]));

        svg.selectAll(".link")
            .data(links)
            .enter().append("line")
            .attr("class", "link")
            .attr("x1", d => xScale(nodes.find(n => n.id === d.source).layer))
            .attr("y1", d => yScales[nodes.find(n => n.id === d.source).layer](nodes.find(n => n.id === d.source).index))
            .attr("x2", d => xScale(nodes.find(n => n.id === d.target).layer))
            .attr("y2", d => yScales[nodes.find(n => n.id === d.target).layer](nodes.find(n => n.id === d.target).index));

        const nodeElems = svg.selectAll(".node")
            .data(nodes)
            .enter().append("circle")
            .attr("class", d => `node ${d.layer === 0 ? 'input' : d.layer === layers.length - 1 ? 'output' : 'hidden'}`)
            .attr("cx", d => xScale(d.layer))
            .attr("cy", d => yScales[d.layer](d.index))
            .attr("r", 20);

        const labels = svg.selectAll(".label")
            .data(nodes)
            .enter().append("text")
            .attr("class", "label")
            .attr("x", d => xScale(d.layer))
            .attr("y", d => yScales[d.layer](d.index) + 5)
            .attr("text-anchor", "middle")
            .text(d => d.value);

        function updateValues() {
            nodes.forEach(n => n.value = Math.random().toFixed(2));
            links.forEach(l => l.weight = Math.random().toFixed(2));
            labels.text(d => d.value);
        }
        
        setInterval(updateValues, 1000);
    </script>
</body>
</html>
