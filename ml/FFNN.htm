<!DOCTYPE html>
<html>
<head>
    <title>Feed Forward Neural Network Visualization</title>
    <style>
        #network-container {
            position: relative;
            border: 1px solid #ccc;
            margin-top: 20px;
        }
        .node {
            position: absolute;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #eee;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .edge {
            position: absolute;
            border-bottom: 1px solid #aaa;
        }
        #code-container {
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 10px;
            display: none;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <h1>Feed Forward Neural Network Visualization</h1>

    <div>
        <label for="input-nodes">Input Nodes (2-8):</label>
        <input type="number" id="input-nodes" min="2" max="8" value="2">
    </div>
    <div>
        <label for="hidden-nodes">Hidden Nodes (2-10):</label>
        <input type="number" id="hidden-nodes" min="2" max="10" value="3">
    </div>
    <div>
        <label for="output-nodes">Output Nodes (2-4):</label>
        <input type="number" id="output-nodes" min="2" max="4" value="2">
    </div>
    <div>
      <label>Input Values:</label>
      <div id="input-values"></div>
    </div>
    <div>
      <label>Target Output Values:</label>
      <div id="target-values"></div>
    </div>
    <button onclick="createNetwork()">Create Network</button>
    <button onclick="trainNetwork()">Train Network</button>
    <button onclick="showCode()">Show Algorithm Code</button>

    <div id="network-container"></div>
    <div id="code-container"></div>

    <script>
        const networkContainer = document.getElementById('network-container');
        const inputValuesDiv = document.getElementById('input-values');
        const targetValuesDiv = document.getElementById('target-values');
        let inputNodesCount = 2;
        let hiddenNodesCount = 3;
        let outputNodesCount = 2;
        let inputValues = [];
        let targetValues = [];
        let weightsInputHidden = [];
        let weightsHiddenOutput = [];
        let epochs = 0;

        function updateInputOutputFields(){
          inputValuesDiv.innerHTML = "";
          targetValuesDiv.innerHTML = "";
          for(let i = 0; i < inputNodesCount; i++){
            inputValuesDiv.innerHTML += `<label>Input <span class="math-inline">\{i\+1\}\:</label\><input type\="number" id\="input\-</span>{i}" value="0"><br>`;
          }
          for(let i = 0; i < outputNodesCount; i++){
            targetValuesDiv.innerHTML += `<label>Target <span class="math-inline">\{i\+1\}\:</label\><input type\="number" id\="target\-</span>{i}" value="1"><br>`;
          }
        }

        function createNetwork() {
            inputNodesCount = parseInt(document.getElementById('input-nodes').value);
            hiddenNodesCount = parseInt(document.getElementById('hidden-nodes').value);
            outputNodesCount = parseInt(document.getElementById('output-nodes').value);
            networkContainer.innerHTML = '';
            inputValues = [];
            targetValues = [];
            weightsInputHidden = [];
            weightsHiddenOutput = [];
            epochs = 0;
            updateInputOutputFields();
            for(let i = 0; i < inputNodesCount; i++){
              inputValues.push(0);
            }
            for(let i = 0; i < outputNodesCount; i++){
              targetValues.push(1);
            }
            for (let i = 0; i < inputNodesCount; i++) {
                weightsInputHidden[i] = [];
                for (let j = 0; j < hiddenNodesCount; j++) {
                    weightsInputHidden[i][j] = Math.random() * 0.4 - 0.2;
                }
            }
            for (let i = 0; i < hiddenNodesCount; i++) {
                weightsHiddenOutput[i] = [];
                for (let j = 0; j < outputNodesCount; j++) {
                    weightsHiddenOutput[i][j] = Math.random() * 0.4 - 0.2;
                }
            }
            drawNetwork();
        }

        function drawNetwork() {
            networkContainer.innerHTML = '';
            const containerWidth = networkContainer.offsetWidth;
            const containerHeight = networkContainer.offsetHeight;
            const inputNodeY = containerHeight * 0.2;
            const hiddenNodeY = containerHeight * 0.5;
            const outputNodeY = containerHeight * 0.8;

            for (let i = 0; i < inputNodesCount; i++) {
                const x = (containerWidth / (inputNodesCount + 1)) * (i + 1);
                createNode(x, inputNodeY, 'input-' + i);
            }
            for (let i = 0; i < hiddenNodesCount; i++) {
                const x = (containerWidth / (hiddenNodesCount + 1)) * (i + 1);
                createNode(x, hiddenNodeY, 'hidden-' + i);
            }
            for (let i = 0; i < outputNodesCount; i++) {
                const x = (containerWidth / (outputNodesCount + 1)) * (i + 1);
                createNode(x, outputNodeY, 'output-' + i);
            }

            for (let i = 0; i < inputNodesCount; i++) {
                for (let j = 0; j < hiddenNodesCount; j++) {
                    createEdge('input-' + i, 'hidden-' + j);
                }
            }
            for (let i = 0; i < hiddenNodesCount; i++) {
                for (let j = 0; j < outputNodesCount; j++) {
                    createEdge('hidden-' + i, 'output-' + j);
                }
            }
        }

        function createNode(x, y, id) {
            const node = document.createElement('div');
            node.className = 'node';
            node.id = id;
            node.style.left = (x - 15) + 'px';
            node.style.top = (y - 15) + 'px';
            networkContainer.appendChild(node);
        }

        function createEdge(fromId, toId) {
            const fromNode = document.getElementById(fromId);
            const toNode = document.getElementById(toId);
            const fromRect = fromNode.getBoundingClientRect();
            const toRect = toNode.getBoundingClientRect();
            const edge = document.createElement('div');
            edge.className = 'edge';
            edge.style.left = (fromRect.left + 15 - networkContainer.getBoundingClientRect().left) + 'px';
            edge.style.top = (fromRect.top + 15 - networkContainer.getBoundingClientRect().top) + 'px';
            edge.style.width = Math.sqrt(Math.pow(toRect.left - fromRect.left, 2) + Math.pow(toRect.top - fromRect.top, 2)) + 'px';
            edge.style.transform = `rotate(${Math.atan2(toRect.top - fromRect.top, toRect.left - fromRect.left)}rad)`;
            networkContainer.appendChild(edge);
        }

        function trainNetwork() {
          if (epochs >= 10) return;
          epochs++;
          for(let i = 0; i < inputNodesCount; i++){
            inputValues[i] = parseFloat(document.getElementById(`input-${i}`).value);
          }
          for(let i = 0; i < outputNodesCount; i++){
            targetValues[i] = parseFloat(document.getElementById(`target-${i}`).value);
          }
          let hiddenLayerOutput = [];
          for (let j = 0; j < hiddenNodesCount; j++) {
              let sum = 0;
              for (let i = 0; i < inputNodesCount; i++) {
                  sum += inputValues[i] * weightsInputHidden[i][j];
              }
              hiddenLayerOutput[j] = sigmoid(sum);