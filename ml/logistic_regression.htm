<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logistic Regression Visualization</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
        }
        canvas {
            max-width: 600px;
            margin: auto;
        }
        input, button {
            margin: 5px;
        }
        #codeContainer {
            display: none;
            text-align: left;
            background: #f4f4f4;
            padding: 10px;
            border: 1px solid #ccc;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h2>Interactive Logistic Regression Visualization</h2>
    
    <label>X values (comma separated): <input type="text" id="x_values" value="1,2,3,4,5"></label><br>
    <label>Y values (binary, comma separated): <input type="text" id="y_values" value="0,0,1,1,1"></label><br>
    <label>Initial a: <input type="number" id="a" value="0"></label>
    <label>Initial b: <input type="number" id="b" value="0"></label><br>
    <label>Learning Rate: <input type="number" id="learning_rate" value="0.01" step="0.001"></label>
    <label>Epochs (max 10): <input type="number" id="epochs" value="5" min="1" max="10"></label><br>
    
    <button onclick="initializeRegression()">Start Regression</button>
    <button onclick="prevEpoch()">Previous Epoch</button>
    <button onclick="nextEpoch()">Next Epoch</button>
    <button onclick="toggleCode()">Show Code</button>
    
    <canvas id="regressionChart"></canvas>
    <p id="info"></p>
    <p id="error_message" style="color: red;"></p>
    
    <div id="codeContainer">
        <pre id="codeBlock"></pre>
    </div>

    <script>
        let chart;
        let x, y, a, b, lr, epochs;
        let epochIndex = 0;
        let history = [];

        function sigmoid(z) {
            return 1 / (1 + Math.exp(-z));
        }

        function plotData(epoch) {
            let ctx = document.getElementById('regressionChart').getContext('2d');
            if (chart) chart.destroy();
            let data = history[epoch];
            chart = new Chart(ctx, {
                type: 'scatter',
                data: {
                    datasets: [
                        {
                            label: 'Data Points',
                            data: x.map((xi, i) => ({ x: xi, y: y[i] })),
                            backgroundColor: 'blue'
                        },
                        {
                            label: 'Logistic Curve',
                            data: data.line,
                            type: 'line',
                            borderColor: 'red',
                            borderWidth: 2,
                            fill: false
                        }
                    ]
                },
                options: {
                    scales: {
                        x: { title: { display: true, text: 'X' } },
                        y: { title: { display: true, text: 'Probability' }, min: 0, max: 1 }
                    }
                }
            });
            document.getElementById("info").innerText = `Epoch: ${epoch + 1}, a: ${data.a.toFixed(4)}, b: ${data.b.toFixed(4)}, Loss: ${data.loss.toFixed(4)}`;
        }

        function initializeRegression() {
            let errorMessage = document.getElementById("error_message");
            errorMessage.innerText = "";
            
            x = document.getElementById("x_values").value.split(",").map(Number);
            y = document.getElementById("y_values").value.split(",").map(Number);
            
            if (x.length !== y.length) {
                errorMessage.innerText = "Error: Number of X and Y values must be equal.";
                return;
            }
            
            a = parseFloat(document.getElementById("a").value);
            b = parseFloat(document.getElementById("b").value);
            lr = parseFloat(document.getElementById("learning_rate").value);
            epochs = Math.min(10, parseInt(document.getElementById("epochs").value));
            epochIndex = 0;
            history = [];
            
            for (let epoch = 0; epoch < epochs; epoch++) {
                let da = 0, db = 0, loss = 0;
                let n = x.length;
                for (let i = 0; i < n; i++) {
                    let z = a * x[i] + b;
                    let y_pred = sigmoid(z);
                    let error = y_pred - y[i];
                    da += (1 / n) * error * x[i];
                    db += (1 / n) * error;
                    loss += -(y[i] * Math.log(y_pred) + (1 - y[i]) * Math.log(1 - y_pred));
                }
                a -= lr * da;
                b -= lr * db;
                loss /= n;
                
                let line = x.map(xi => ({ x: xi, y: sigmoid(a * xi + b) }));
                history.push({ a, b, loss, line });
            }
            plotData(epochIndex);
        }

        function prevEpoch() {
            if (epochIndex > 0) {
                epochIndex--;
                plotData(epochIndex);
            }
        }

        function nextEpoch() {
            if (epochIndex < history.length - 1) {
                epochIndex++;
                plotData(epochIndex);
            }
        }

        function toggleCode() {
            let codeContainer = document.getElementById("codeContainer");
            let codeBlock = document.getElementById("codeBlock");
            if (codeContainer.style.display === "none") {
                codeContainer.style.display = "block";
                codeBlock.innerText = `function sigmoid(z) {\n    return 1 / (1 + Math.exp(-z));\n}\n\nfunction initializeRegression() {\n    // Logistic Regression Gradient Descent\n    for (let epoch = 0; epoch < epochs; epoch++) {\n        let da = 0, db = 0, loss = 0;\n        for (let i = 0; i < x.length; i++) {\n            let y_pred = sigmoid(a * x[i] + b);\n            let error = y_pred - y[i];\n            da += error * x[i];\n            db += error;\n            loss += -(y[i] * Math.log(y_pred) + (1 - y[i]) * Math.log(1 - y_pred));\n        }\n        a -= lr * da;\n        b -= lr * db;\n    }\n}`;
            } else {
                codeContainer.style.display = "none";
            }
        }
    </script>
</body>
</html>
